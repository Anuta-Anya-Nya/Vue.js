Самые популярные фреймворки - React (больше как библиотека), Angular, Vue 
реактивные - реагируют на измерение состояния, автоматически перерендивается страница  
подключение: c помощью ссылки в head или body 

<div id="app">{{ message }}{{sayHello()}}</div>
new Vue({
    el: '#app', // элемент с которым работаем 
    data: { //все данные 
        message: 'hello world'
    },
    methods: { // функции, при изменении чего-то на странице всегда перерасчитываются повторно. если есть входные данные 
        changeText(){
            this.message = 'new message';            
        }
    },
    computed: { //ВЫЧИСЛЯЕМЫЕ СВОЙСТВА функции которые что-то возвращают. можно подставить на страницу имя этой функции и она что-то измняет. при изменении какого-то значения на странице НЕ ПЕРЕРАСЧИТЫВАЮТСЯ в отлчии от методов 
    внутрь данные не передаются 
        changeText(){
            return this.text + '!!!';
        }
    },
    beforeCreate(){//функция хук которая исполняется всегда когда инициализируется приложение, перед созданием компонента, таких хуков несколько 
    }
})           
----------------------------------------
ДИРЕКТИВЫ - специальный атрибут html элемента или компонента с приставкой v-, который привязывает изменение этого элемента к какому-то js выражению 
v-on: директива 

    <button v-on:click="changeText">
    $event передаем в функцию 
v-on:mousemove="handler($event)" - функция на движение мыши 
v-on:mousemove.stop.prevent - не реагирует на движение мыши 
v-on:input
v-on:focus
v-on:mouseover
v-on:keyup.space - значение клавиш

v-html="переменная с html кодом" интрапопляция данных 
v-if="productInCart"> блок показывается если productInCart: true при измениии условий переренлерится вся страница 
v-else="!productInCart">блок показывается если productInCart: false
    <button @click ="productInCart = !productInCart">
    v-on:click можно как @click
v-show="productInCart" добавляет убирает display:none. сразу в потоме, не перерисовывает всю страницу при изменении 
v-bind:атрибут='переменная' (краткая запись :атрибут='значение')можно влиять на значение атрибута 
    :style="styleBlock"
    в дате: styleBlock: {
        color: "red",
    }
    :class="{like: flag}" 

v-for="item in arr"
v-model="переменная для модерации" в инпуте появляется значение переменной text и при вводе текста в инпут автоматически меняется и переменная 
    возможность моделировать данные 
    можно добавить проверку v-model.number - атоматическое приведение е числу
                            v-model.trim - автомаичекски обрезать пробелы в начале и конце 
                            v-model.lazy синхрониирует ввод с событиев инпут, вводятся не каждый символ, а при снятии фокуса с инпута. после события change 
экземпляр как и компонент имеет жизненный цикл.
от инициализации до дестроя. описывается в обьекте вью функциями - хуками жиз
за данными ходим в хуке mounted - после инициализации и первичного рендера 
